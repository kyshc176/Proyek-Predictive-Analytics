# -*- coding: utf-8 -*-
"""Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PK4b_UretyuB1nPg6fWKbdBjLqOYPqRy

## Data Collection
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
# %matplotlib inline

df = pd.read_csv("/Users/tika/Documents/CC DICODING/diamonds.csv")
df.head()

"""#  Data Preparation & Removing Outlier"""

df.shape

df.info()

# Fitur Point unnamed tidak mempengaruhi harga sewa model sehingga akan didrop
df = df.drop(["Unnamed: 0"], axis = 'columns')

"""# Univariate Analysis"""

# Get list of categorical variables
s = (df.dtypes =="object")
object_cols = list(s[s].index)
print("Categorical variables:")
print(object_cols)

print("Unique values in 'cut':", df['cut'].unique())
print("Unique values in 'color':", df['color'].unique())
print("Unique values in 'clarity':", df['clarity'].unique())

# Distribusi kategori cut
plt.figure(figsize=(7, 4))
sns.countplot(x='cut', data=df, palette='Set2')
plt.title('Distribusi Cut')
plt.xlabel('Cut')
plt.ylabel('Count')
plt.show()

# Distribusi kategori color
plt.figure(figsize=(7, 4))
sns.countplot(x='color', data=df, palette='Set3')
plt.title('Distribusi Color')
plt.xlabel('Color')
plt.ylabel('Count')
plt.show()

# Distribusi kategori clarity
plt.figure(figsize=(7, 4))
sns.countplot(x='clarity', data=df, palette='pastel')
plt.title('Distribusi Clarity')
plt.xlabel('Clarity')
plt.ylabel('Count')
plt.show()

# Make copy to avoid changing original data
label_data = df.copy()

# Apply label encoder to each column with categorical data
label_encoder = LabelEncoder()
for col in object_cols:
    label_data[col] = label_encoder.fit_transform(label_data[col])
label_data.head()

df.describe()

"""Nilai minimum “x”, “y”, “z” adalah nol, hal ini mengindikasikan bahwa ada nilai yang salah dalam data yang mewakili berlian tanpa dimensi atau 2 dimensi. Jadi, kita perlu menyaringnya karena itu adalah titik data yang rusak."""

#Dropping dimentionless diamonds
data = df.drop(df[df["x"]==0].index)
data = df.drop(df[df["y"]==0].index)
data = df.drop(df[df["z"]==0].index)
df.shape

# Menampilkan distribusi harga
plt.figure(figsize=(10, 5))
sns.histplot(df['price'], bins=50, kde=True, color='skyblue')
plt.title('Distribusi Harga Berlian')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

# Menampilkan distribusi carat
plt.figure(figsize=(10, 5))
sns.histplot(df['carat'], bins=50, kde=True, color='salmon')
plt.title('Distribusi Carat')
plt.xlabel('Carat')
plt.ylabel('Frequency')
plt.show()

"""# Multivariate Analysis"""

ax = sns.regplot(x="price", y="y", data=data, fit_reg=True, scatter_kws={"color": "skyblue"}, line_kws={"color": "blue"})
ax.set_title("Regression Line on Price vs 'y'", color="#4e4c39")

ax= sns.regplot(x="price", y="z", data=data, fit_reg=True, scatter_kws={"color": "skyblue"}, line_kws={"color": "blue"})
ax.set_title("Regression Line on Price vs 'z'", color="#4e4c39")

ax= sns.regplot(x="price", y="depth", data=data, fit_reg=True, scatter_kws={"color": "skyblue"}, line_kws={"color": "blue"})
ax.set_title("Regression Line on Price vs Depth", color="#4e4c39")

ax=sns.regplot(x="price", y="table", data=data, fit_reg=True, scatter_kws={"color": "skyblue"}, line_kws={"color": "blue"})
ax.set_title("Regression Line on Price vs Table", color="#4e4c39")

"""Kita dapat dengan jelas melihat pencilan pada atribut-atribut ini. Selanjutnya, kita akan menghapus titik-titik data ini."""

#Dropping the outliers.
data = data[(data["depth"]<75)&(data["depth"]>45)]
data = data[(data["table"]<80)&(data["table"]>40)]
data = data[(data["x"]<30)]
data = data[(data["y"]<30)]
data = data[(data["z"]<30)&(data["z"]>2)]
data.shape

# Korelasi antar fitur numerik
plt.figure(figsize=(10, 8))
sns.heatmap(label_data.corr(), annot=True, fmt=".2f", cmap="coolwarm")
plt.title('Correlation Matrix')
plt.show()

"""# Modelling & Evaluation

# One Hot Encoding
"""

df_encoded = pd.get_dummies(df, columns=['cut', 'color', 'clarity'], drop_first=True)

X = df_encoded.drop('price', axis=1)
y = df_encoded['price']

"""# Train Test Split"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

"""# Normalization"""

numerical_cols = ['carat', 'depth', 'table', 'x', 'y', 'z']
scaler = StandardScaler()
X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

print(f"Ukuran data latih (X_train): {X_train.shape}")
print(f"Ukuran data uji (X_test): {X_test.shape}")
print(f"Ukuran label latih (y_train): {y_train.shape}")
print(f"Ukuran label uji (y_test): {y_test.shape}")

models = {
    "LinearRegression": LinearRegression(),
    "DecisionTree": DecisionTreeRegressor(random_state=42),
    "RandomForest": RandomForestRegressor(random_state=42),
    "KNeighbors": KNeighborsRegressor()
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    results[name] = {
        "MAE": mae,
        "MSE": mse,
        "RMSE": rmse,
        "R2 Score": r2
    }

pd.DataFrame(results).T

# Extract MSE values from results
mse_values = {name: metrics["MSE"] for name, metrics in results.items()}
r2_values = {name: metrics["R2 Score"] for name, metrics in results.items()}

# Create a bar plot for MSE values
plt.figure(figsize=(8, 6))
plt.bar(mse_values.keys(), mse_values.values(), color='skyblue')
plt.title('Mean Squared Error (MSE) for Different Models')
plt.xlabel('Model')
plt.ylabel('MSE')
plt.xticks(rotation=45)
plt.show()

# Create a bar plot for MSE values
plt.figure(figsize=(8, 6))
plt.bar(r2_values.keys(), r2_values.values(), color='skyblue')
plt.title('R² Score (Coefficient of Determination) for Different Models')
plt.xlabel('Model')
plt.ylabel('R2')
plt.xticks(rotation=45)
plt.show()